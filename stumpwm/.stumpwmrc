(setf stumpwm::*debug-level* 10)
(redirect-all-output (data-dir-file "debug-output" "txt"))

;;; Swap Caps with Ctrl
(run-shell-command "setxkbmap -option ctrl:nocaps")

(load "~/quicklisp/setup.lisp")
(ql:quickload :clx-truetype)

(stumpwm:run-shell-command
 "~/dotfiles/stumpwm/background.sh")

(add-to-load-path "~/.stumpwm.d/contrib/modeline/cpu")
(add-to-load-path "~/.stumpwm.d/contrib/modeline/mem")
(add-to-load-path "~/.stumpwm.d/contrib/modeline/battery-portable")
(add-to-load-path "~/.stumpwm.d/contrib/util/ttf-fonts")
(add-to-load-path "~/.stumpwm.d/contrib/util/swm-gaps")
;; (set-contrib-dir "/home/laurens/.stumpwm.d/contrib/")

(load-module "cpu")
(load-module "mem")
(load-module "battery-portable")
(load-module "ttf-fonts")
(load-module "swm-gaps")

(xft:cache-fonts)
(set-font (make-instance 'xft:font :family "DejaVu Sans Mono" :subfamily "Book" :size 13))

;; Default Browser
(setq *browser* "conkeror")

;; Browser
(defcommand browser () ()
  "run or raise conkeror"
  (run-or-raise "conkeror" '(:class "Conkeror")))
(define-key *root-map* (kbd "b") "browser")

;; Terminal
(defcommand term () ()
  "run or raise terminal"
  (run-or-raise "konsole" '(:class "Terminal")))
(define-key *root-map* (kbd "c") "term")

;; dmenu
(defcommand dmenu() ()
(run-shell-command "dmenu_run"))
(define-key *root-map* (kbd "d") "dmenu")

;; Set mouse policy to "focus on mouse-click"
(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy

;; Use the window's resource name to reduce clutter in window name
(setf stumpwm:*window-name-source* :resource-name)

;; Set timeout of modeline to 1 and place it at the bottom
(setf *mode-line-timeout* 1)
(setf *mode-line-position* :top)

(setf stumpwm:*screen-mode-line-format*
  (list
  "%n: (%c%M) | Batt: %B | "
  "%w"
  "^>|" '(:eval (stumpwm:run-shell-command "date" t))))

(stumpwm:enable-mode-line (stumpwm:current-screen)
                          (stumpwm:current-head)
						  t)

;; Current group is dev env
(grename "Dev env")
(emacs)
(browser)

(gnew "Media env")
(gnew "Other env")

(gnewbg-float "Floating env")

;; Select "Dev env" as starting group
(run-commands "gselect 1")


;; Inner gaps run along all the 4 borders of a frame
(setf swm-gaps:*inner-gaps-size* 10)

;; Outer gaps add more padding to the outermost borders
;; (touching the screen border)
(setf swm-gaps:*outer-gaps-size* 20)

;; Enable useless gaps if not enabled
;; 'disabled' by default
( if (not swm-gaps:*gaps-on*)
  (swm-gaps:toggle-gaps)
)
